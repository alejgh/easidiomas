@using WebClient.Model
@using WebClient.Model.External
@model Statistics
@{
    ViewData["Title"] = "Statistics";
}

<h1>System Statistics</h1>

<h2>Languages distribution</h2>
<div class="langPies">
    <div id="native-pie"></div>
    <div id="post-pie"></div>
    <div id="learning-pie"></div>
</div>

<h2>Other statistics</h2>
<div id="barChar">
</div>

<script src="https://d3js.org/d3.v4.min.js" charset="utf-8"></script>
<script src="~/lib/d3pie.js"></script>
<script src="~/lib/d3pie.min.js"></script>
<script>

    var createdPosts = JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.CreatedPosts))');
    var nativeUsers = JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.RegisteredUsers.nnative))');
    var learningUsers = JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.RegisteredUsers.learning))');


    let finalPosts = [];
    for (let post in createdPosts.Entry) {
        if (createdPosts.Entry[post].Key == 'total')
            continue;
        finalPosts.push({
            label: createdPosts.Entry[post].Key,
            value: parseInt(createdPosts.Entry[post].Value),
        })
    }


    let finalNatives = [];
    for (let post in nativeUsers.Entry) {
        if (nativeUsers.Entry[post].Key == 'total')
            continue;
        finalNatives.push({
            label: nativeUsers.Entry[post].Key,
            value: parseInt(nativeUsers.Entry[post].Value),
        })
    }


    let finalLearning = [];
    for (let post in learningUsers.Entry) {
        if (learningUsers.Entry[post].Key == 'total')
            continue;
        finalLearning.push({
            label: learningUsers.Entry[post].Key,
            value: parseInt(learningUsers.Entry[post].Value),
        })
    }

    console.log({
        finalPosts: finalPosts,
        finalNatives: finalNatives,
        finalLearning: finalLearning
    })

   

    var nativePie = new d3pie("native-pie", {
        header: {
            title: {
                text: "Native",
                color: "#222",
                fontSize: 25,
                font: "arial"
            },
            subtitle: {
                color: "#666666",
                fontSize: 14,
                font: "arial"
            },
            location: "top-center",
            titleSubtitlePadding: 8
        },
        data: {
            content: finalNatives
        },
        size: {
            canvasHeight: 500,
            canvasWidth: 500,
            pieInnerRadius: 0,
            pieOuterRadius: null
        }

    });

    var postPie = new d3pie("post-pie", {
        header: {
            title: {
                text: "Post",
                color: "#222",
                fontSize: 25,
                font: "arial"
            },
            subtitle: {
                color: "#666666",
                fontSize: 14,
                font: "arial"
            },
            location: "top-center",
            titleSubtitlePadding: 8
        },
        data: {
            content: finalPosts
        }

    });


    var learningPie = new d3pie("learning-pie", {
        header: {
            title: {
                text: "Learning",
                color: "#222",
                fontSize: 25,
                font: "arial"
            },
            subtitle: {
                color: "#666666",
                fontSize: 14,
                font: "arial"
            },
            location: "top-center",
            titleSubtitlePadding: 8
        },
        data: {
            content: finalLearning
        },
    });


</script>

<script>


    var createdChats = @Model.CreatedChats;
    var createdPosts = JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.CreatedPosts))');
    var createdUsers = @Model.RegisteredUsers.Total;
    let totalPosts = 0;
    for (let post in createdPosts.Entry) {
        if (createdPosts.Entry[post].Key == 'total')
            continue;
        totalPosts += parseInt(createdPosts.Entry[post].Value);
    }
    console.log(totalPosts)
    // set the dimensions and margins of the graph
    var margin = { top: 20, right: 20, bottom: 30, left: 40 },
        width = 960 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

    // set the ranges
    var x = d3.scaleBand()
        .range([0, width])
        .padding(0.1);
    var y = d3.scaleLinear()
        .range([height, 0]);

    // append the svg object to the body of the page
    // append a 'group' element to 'svg'
    // moves the 'group' element to the top left margin
    var svg = d3.select("#barChar").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

    // get the data
    d3.csv("https://gist.githubusercontent.com/meli-lewis/cd76f5273c1ef13a12915b5819dc10c7/raw/f70e03b1314c308024ebceb40895a2eee54d82bb/test.csv", function (error, data) {
        if (error) throw error;

        console.log(data)
        // format the data
        data.forEach(function (d) {
            d.complaints = +d.complaints;
        });

        data = [
            {
                year: "posts",
                complaints: totalPosts
            },

            {
                year: "users",
                complaints: createdUsers
            },

            {
                year: "chats",
                complaints: createdChats
            }]

        // Scale the range of the data in the domains
        x.domain(data.map(function (d) { return d.year; }));
        y.domain([0, d3.max(data, function (d) { return d.complaints; })]);

        // append the rectangles for the bar chart
        svg.selectAll(".bar")
            .data(data)
            .enter().append("rect")
            .attr("class", "bar")
            .attr("x", function (d) { return x(d.year); })
            .attr("width", x.bandwidth())
            .attr("y", function (d) { return y(d.complaints); })
            .attr("height", function (d) { return height - y(d.complaints); });

        // add the x Axis
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));

        // add the y Axis
        svg.append("g")
            .call(d3.axisLeft(y));

    });
</script>


<style>
    .langPies {
        display: grid;
        grid-template-columns: auto auto auto;
        justify-content: center;
        align-items: center;
    }



   

    .bar {
        fill: rgb(70, 154, 180);
    }

    svg {
        margin-top: 10px !important;
    }

    h2 {
        margin-top: 2em;
        margin-bottom: 0.82em;
    }

</style>