version: '3.9'
services:
  
####### THIRD PARTY SERVICES START #######
  
  # Apache Zookeper, Kafka master.
  zookeeper:
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: wurstmeister/zookeeper

  # Apache Kafka.
  kafka:
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: wurstmeister/kafka
    ports:
      - published: 9092
        target: 9092
        protocol: tcp
        mode: host
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CREATE_TOPICS: "service_logs:1:1,posts:1:1,topics:1:1,lang_detection:1:1,offensive_text_detection:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Postgres.
  postgres_db:
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
      PGDATA: /data/postgres

  # Neo4J.
  neo4j:
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: neo4j
    environment:
      NEO4J_AUTH: neo4j/secret

  # Redis.
  redis:
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: redis

  # Redis.
  mongo:
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: mongo

  # Elasticsearch.
  elasticsearch:
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.0
    volumes:
      - type: bind
        source: ./config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: devPass45
      discovery.type: single-node
    
  # Logstash.
  logstash:
    depends_on:
      - elasticsearch
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: docker.elastic.co/logstash/logstash:7.11.0
    volumes:
      - type: bind
        source: ./config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./config/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: devPass45

  # Kibana.
  kibana:
    depends_on:
      - elasticsearch
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: docker.elastic.co/kibana/kibana:7.11.0
    volumes:
      - type: bind
        source: ./config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
    - published: 5601
      target: 5601
    environment:
      ELASTIC_PASSWORD: devPass45

####### THIRD PARTY SERVICES END #######
############ SERVICES START ############

  # Topicmodeling.
  topicmodeling:
    depends_on:
    - kafka
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: registry.easidiomas.wcr.es:7777/topicmodeling_service
    environment:
      KAFKA_ENDPOINT: "kafka:9092"
      KAFKA_INPUT_TOPIC: "posts"
      KAFKA_LOGGING_TOPIC: "service_logs"

  # Offensive text detection.
  offensivetextdetectionservice:
    depends_on:
    - kafka
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: registry.easidiomas.wcr.es:7777/offensivetextdetection_service
    environment:
      KAFKA_ENDPOINT: "kafka:9092"
      KAFKA_INPUT_TOPIC: "posts"
      KAFKA_LOGGING_TOPIC: "service_logs"

  # Post service.
  postsservice:
    depends_on:
    - kafka
    - postgres_db
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: registry.easidiomas.wcr.es:7777/posts_service
    environment:
      KAFKA_ENDPOINT: "kafka:9092"
      POSTGRES_ENDPOINT: "postgres_db"
      POSTGRES_PORT: "5432"
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASS: ${POSTGRES_PASS}
      POSTGRES_DB: ${POSTGRES_DB}
      STATISTICS_SERVICE_ENDPOINT: "http://statisticsservice:5000/soapws/statistics"

  # Images service.
  imagesservice:
    depends_on:
    - kafka
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: registry.easidiomas.wcr.es:7777/images_service

  # Text to Speech service.
  texttospeechservice:
    depends_on:
    - kafka
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: registry.easidiomas.wcr.es:7777/texttospeech_service
    environment: 
      KAFKA_ENDPOINT: "kafka:9092"
      KAFKA_ENDPOINT: "kafka:9092"
      STATISTICS_SERVICE_ENDPOINT: "http://statisticsservice:5000/soapws/statistics?wsdl"

  # Users service.
  usersservice:
    depends_on:
    - kafka
    - neo4j
    - imagesservice
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: registry.easidiomas.wcr.es:7777/users_service
    environment:
      SERVER_PORT: 5000
      USERS_SERVICE_NEO4J_ADDR: bolt://neo4j:7687
      STATS_SERVICE_WDSL: "http://statisticsservice:5000/soapws/statistics?wsdl"
      IMAGES_SERVICE_WDSL: "http://imagesservice:5000/soapws/images?wsdl"

  # Chats service.
  chatsservice:
    depends_on:
    - kafka
    - mongo
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: registry.easidiomas.wcr.es:7777/chats_service
    environment:
      DB_HOST: mongo
      DB_PORT: 27017
      SERVER_PORT: 5000
      STATS_SERVICE_WDSL: "http://statisticsservice:5000/soapws/statistics?wsdl"

  # Chats service.
  authservice:
    depends_on:
    - usersservice
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: registry.easidiomas.wcr.es:7777/auth_service
    environment:
      USERS_SERVICE_ADDR: usersservice:5000
      USERS_SERVICE_HOST: usersservice
      USERS_SERVICE_PORT: 5000

  # Statistics service.
  statisticsservice:
    depends_on:
    - redis
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: registry.easidiomas.wcr.es:7777/statistics_service
    environment:
      REDIS_ADDR: redis
      REDIS_PORT: 6379

  # Language identification service.
  languageidentificationservice:
    depends_on:
    - kafka
    - postsservice
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: registry.easidiomas.wcr.es:7777/languageidentification_service
    environment:
      STATISTICS_SERVICE_ENDPOINT: "http://statisticsservice:5000/soapws/statistics"
      KAFKA_ENDPOINT: kafka:9092
      SERVICE_NAME: LANG_INDET_SERVICE
      LANGUAGE_DETECTION_TOPIC: languageidentification_service
      POSTS_TOPIC: posts

  # Language identification service.
  translationsservice:
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: registry.easidiomas.wcr.es:7777/translations_service
    environment: 
      STATISTICS_SERVICE_ENDPOINT: "http://statisticsservice:5000/soapws/statistics"

  # Public API service.
  apigateway:
    depends_on:
      - authservice
      - statisticsservice
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 2
    image: registry.easidiomas.wcr.es:7777/apigateway_service
    ports:
    - published: 8443 # Safe port
      target: 8443
    - published: 5000 # Unsafe port
      target: 5000
    environment:
      AUTH_SERVICE_ADDRESS: authservice:5000
      USERS_SERVICE_HOST: usersservice
      USERS_SERVICE_PORT: 5000
      CHATS_SERVICE_HOST: chatsservice
      CHATS_SERVICE_PORT: 5000
      POSTS_SERVICE_HOST: postsservice
      POSTS_SERVICE_PORT: 5000
      STATS_SERVICE_WDSL: "http://statisticsservice:5000/soapws/statistics?wsdl"
      TTS_SERVICE_HOST: texttospeechservice
      TTS_SERVICE_PORT: 5000
      TRANSLATIONS_SERVICE_HOST: translationsservice
      TRANSLATIONS_SERVICE_PORT: 5000
    
  # Web Client.
  webclient:
    depends_on:
      - apigateway
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: registry.easidiomas.wcr.es:7777/web_client
    ports:
    - published: 443 # Safe port
      target: 443
    - published: 80 # Unsafe port
      target: 80
    environment:
      EASIDIOMAS_API_ENDPOINT: "https://apigateway:8443/api"

  # Load Generator.
  loadgenerator:
    depends_on:
      - apigateway
    deploy:
      placement:
        constraints:
        - node.role == worker
      replicas: 1
    image: registry.easidiomas.wcr.es:7777/load_generator
    environment:
      API_GATEWAY_ENDPOINT: "https://apigateway:8443/api"
      SLEEP_TIME: "90"