version: "3.8"
services:

  # Kafka cluster orchestrator.
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  # Logging and other events queue.
  # Needs to contain the ports declaration.
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    expose:
     - "9093"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CREATE_TOPICS: "service_logs:1:1,posts:1:1,topics:1:1,lang_detection:1:1,offensive_text_detection:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  postgres_db:
    image: postgres
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    expose:
      - "5432"

  neo4j:
    image: neo4j
    container_name: neo4j
    volumes:
      - type: volume
        source: neo4j
        target: /data
    expose:
      - "7474"
      - "7687"
    environment:
      NEO4J_AUTH: neo4j/secret

  redis:
    image: redis
    container_name: redis
  
  mongo:
    image: 'mongo'
    container_name: mongo

############# SERVICES ################
  
  topicmodeling:
    build: ../src/topicmodelingservice/
    container_name: topicmodelingservice
    depends_on:
      - kafka
    environment:
      KAFKA_ENDPOINT: "kafka:9092"
      KAFKA_INPUT_TOPIC: "posts"
      KAFKA_LOGGING_TOPIC: "service_logs"  

  offensivetextdetectionservice:
    build: ../src/offensivetextdetectionservice/
    container_name: offensivetextdetectionservice
    depends_on:
      - kafka
    environment:
      KAFKA_ENDPOINT: "kafka:9092"
      KAFKA_INPUT_TOPIC: "posts"
      KAFKA_LOGGING_TOPIC: "service_logs"

  postsservice:
    build: ../src/postsservice/
    container_name: postsservice
    ports:
      - "5002:5000"
    hostname: postsservice
    depends_on:
      - kafka
      - postgres_db
    environment:
      KAFKA_ENDPOINT: "kafka:9092"
      POSTGRES_ENDPOINT: "postgres_db"
      POSTGRES_PORT: "5432"
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASS: ${POSTGRES_PASS}
      POSTGRES_DB: ${POSTGRES_DB}
      STATISTICS_SERVICE_ENDPOINT: "http://statisticsservice:5000/soapws/statistics?wsdl"

  imagesservice:
    build: ../src/imagesservice/
    ports:
      - "5004:5000"
    depends_on:
      - kafka
  
  texttospeechservice:
    build: ../src/texttospeechservice/
    container_name: texttospeechservice
    ports:
      - "5003:5000"
    depends_on:
      - kafka
    environment: 
      KAFKA_ENDPOINT: "kafka:9092"
      KAFKA_ENDPOINT: "kafka:9092"
      STATISTICS_SERVICE_ENDPOINT: "http://statisticsservice:5000/soapws/statistics?wsdl"
  
  usersservice:
    build: ../src/usersservice/
    container_name: usersservice
    depends_on:
      - neo4j
      - statisticsservice
      - imagesservice
    expose:
      - "5000"
    environment:
      SERVER_PORT: 5000
      USERS_SERVICE_NEO4J_ADDR: bolt://neo4j:7687
      STATS_SERVICE_WDSL: "http://statisticsservice:5000/soapws/statistics?wsdl"
      IMAGES_SERVICE_WDSL: "http://imagesservice:5000/soapws/images?wsdl"

  chatsservice:
    build: ../src/chatsservice
    container_name: chatsservice
    depends_on:
      - kafka
      - mongo
    expose:
      - "5000"
    environment:
      DB_HOST: mongo
      DB_PORT: 27017
      SERVER_PORT: 5000
      STATS_SERVICE_WDSL: "http://statisticsservice:5000/soapws/statistics?wsdl"
  
  authservice:
    build: ../src/authenticationservice/
    container_name: authservice
    depends_on:
      - usersservice
    expose:
      - "5000"
    environment:
      USERS_SERVICE_ADDR: usersservice:5000
      USERS_SERVICE_HOST: usersservice
      USERS_SERVICE_PORT: 5000

  statisticsservice:
    build: ../src/statisticsservice/
    container_name: statisticsservice
    depends_on:
      - redis
    expose:
      - "5000"
    environment:
      REDIS_ADDR: redis
      REDIS_PORT: 6379
  
  languageidentificationservice:
    build: ../src/languageidentificationservice/
    container_name: languageidentificationservice
    depends_on:
      - kafka
      - postsservice
    expose:
      - "5000"
    environment:
      STATISTICS_SERVICE_ENDPOINT: "http://statisticsservice:5000/soapws/statistics?wsdl"
      KAFKA_ENDPOINT: kafka:9092
      SERVICE_NAME: LANG_INDET_SERVICE
      LANGUAGE_DETECTION_TOPIC: languageidentification_service
      POSTS_TOPIC: posts

  translationsservice:
    build: ../src/translationsservice/
    container_name: translationsservice
    expose:
      - "5000"

  apigateway:
    build: ../src/apigateway/
    container_name: apigateway
    depends_on:
      - authservice
      - statisticsservice
    ports:
      - "8443:8443"
    expose:
      - "8443"
    environment:
      SERVER_SECURE_PORT: 8443
      AUTH_SERVICE_ADDRESS: authservice:5000
      USERS_SERVICE_HOST: usersservice
      USERS_SERVICE_PORT: 5000
      CHATS_SERVICE_HOST: chatsservice
      CHATS_SERVICE_PORT: 5000
      POSTS_SERVICE_HOST: postsservice
      POSTS_SERVICE_PORT: 5000
      STATS_SERVICE_WDSL: "http://statisticsservice:5000/soapws/statistics?wsdl"
      TTS_SERVICE_HOST: texttospeechservice
      TTS_SERVICE_PORT: 5000
      TRANSLATIONS_SERVICE_HOST: translationsservice
      TRANSLATIONS_SERVICE_PORT: 5000

############# Web Client ################
#  webclient:
#    build: ../src/webclient/
#    container_name: webclient
#    depends_on:
#      - apigateway
#    ports:
#      - "80:80"
#      - "443:443"
#    environment:
#      EASIDIOMAS_API_ENDPOINT: "http://apigateway:5000/api"


############ ELK ###############

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:$ELK_VERSION
    container_name: elasticsearch
    volumes:
      - type: bind
        source: ./config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    expose:
      - "9200"
      - "9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: $ELASTIC_PASSWORD
      discovery.type: single-node

  logstash:
    image: docker.elastic.co/logstash/logstash:$ELK_VERSION
    container_name: logstash
    expose:
      - "5044"
      - "5000"
      - "9600"
    volumes:
      - type: bind
        source: ./config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./config/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: $ELASTIC_PASSWORD
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:$ELK_VERSION
    container_name: kibana
    ports:
      - "5601:5601"
    volumes:
      - type: bind
        source: ./config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    environment:
      ELASTIC_PASSWORD: $ELASTIC_PASSWORD
    depends_on:
      - elasticsearch


volumes:
  elasticsearch:
  postgres:
  neo4j: